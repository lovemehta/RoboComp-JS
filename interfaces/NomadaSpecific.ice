//******************************************************************
// 
//  Generated by IDSL to IDL Translator
//  
//  File name: NomadaSpecific.ice
//  Source: NomadaSpecific.idsl
//  
//******************************************************************   
#ifndef ROBOCOMPNOMADASPECIFIC_ICE
#define ROBOCOMPNOMADASPECIFIC_ICE

module RoboCompNomadaSpecific{
	struct Mode{
		byte m;
	};
	struct RobotSpeed{
		float advance;
					float wheelRotation;
					float waistRotation;
				};
	struct RobotPose{
		float wheelAngle;
					float waistAngle;
				};
	struct Odometry{
		float z;
					float x;
				};
	struct RobotState{
		Odometry odom;
		RobotSpeed speed;
		RobotPose pose;
	};
	sequence <float> Dist;
	struct Sensors{
		Dist distIR;
		Dist distSonar;
		int bumperPushed;
		byte selectBumper;
		byte selectIR;
		byte selectSonar;
		float thresholdIR;
					float thresholdSonar;
				};
	struct PowerSupply{
		float level12;
					float level24;
				};
	struct NoData{
		byte empty;
	};
	struct datasetOperationModein{
		byte m;
	};
	struct datagetRobotStateout{
		Odometry odom;
		RobotSpeed speed;
		RobotPose pose;
	};
	struct datasetOdometryin{
		float z;
					float x;
				};
	struct dataresetOdometryin{
		float z;
					float x;
				};
	struct dataresetRobotPosein{
		float wheelAngle;
					float waistAngle;
				};
	struct datasetRobotSpeedin{
		float advance;
					float wheelRotation;
					float waistRotation;
				};
	struct datasetRobotPosein{
		float advance;
					float wheelRotation;
					float waistRotation;
				};
	struct dataenableSensorsin{
		Dist distIR;
		Dist distSonar;
		int bumperPushed;
		byte selectBumper;
		byte selectIR;
		byte selectSonar;
		float thresholdIR;
					float thresholdSonar;
				};
	struct datadisableSensorsin{
		Dist distIR;
		Dist distSonar;
		int bumperPushed;
		byte selectBumper;
		byte selectIR;
		byte selectSonar;
		float thresholdIR;
					float thresholdSonar;
				};
	struct datasetSensorsThresholdin{
		Dist distIR;
		Dist distSonar;
		int bumperPushed;
		byte selectBumper;
		byte selectIR;
		byte selectSonar;
		float thresholdIR;
					float thresholdSonar;
				};
	struct datagetSensorsout{
		Dist distIR;
		Dist distSonar;
		int bumperPushed;
		byte selectBumper;
		byte selectIR;
		byte selectSonar;
		float thresholdIR;
					float thresholdSonar;
				};
	struct datagetBatteryLevelout{
		float level12;
					float level24;
				};
	struct datasetMinimumLevelin{
		float level12;
					float level24;
				};
	struct dataopenCDin{
		byte empty;
	};

	interface NomadaSpecific{
		void  setOperationMode(datasetOperationModein mode);
		void  getRobotState(out datagetRobotStateout state);
		void  setOdometry(datasetOdometryin odom);
		void  resetOdometry(dataresetOdometryin zero);
		void  resetRobotPose(dataresetRobotPosein zero);
		void  setRobotSpeed(datasetRobotSpeedin speed);
		void  setRobotPose(datasetRobotPosein speed);
		void  enableSensors(dataenableSensorsin sen);
		void  disableSensors(datadisableSensorsin sen);
		void  setSensorsThreshold(datasetSensorsThresholdin sen);
		void  getSensors(out datagetSensorsout sen);
		void  getBatteryLevel(out datagetBatteryLevelout pow);
		void  setMinimumLevel(datasetMinimumLevelin pow);
		void  openCD(dataopenCDin empty);
	};
};
  
#endif
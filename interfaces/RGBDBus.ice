//******************************************************************
// 
//  Generated by IDSL to IDL Translator
//  
//  File name: RGBDBus.idl
//  Source: RGBDBus.idsl
//  
//******************************************************************   
#ifndef ROBOCOMPRGBDBUS_ICE
#define ROBOCOMPRGBDBUS_ICE

module RoboCompRGBDBus{
	exception HardwareFailedException{string what;};
	["cpp:comparable"]
	struct CameraParams{
		int colorWidth;
		int colorHeight;
		int colorFPS;
		int depthWidth;
		int depthHeight;
		int depthFPS;
		float colorFocal;
		float depthFocal;
		string name;
	};
	dictionary<string, CameraParams>CameraParamsMap;
	sequence <string> CameraList;
	sequence <byte> ColorBuffer;
	sequence <float> DepthBuffer;
				["cpp:comparable"]
	struct Image{
		CameraParams camera;
		ColorBuffer colorImage;
		DepthBuffer depthImage;
		int width;
		int height;
		long colorTimestamp;
		long depthTimestamp;
	};
	dictionary<string, Image>ImageMap;
	["cpp:comparable"]
	struct Point3D{
		byte r;
		byte g;
		byte b;
		float x;
					float y;
					float z;
				};
	sequence <Point3D> PointCloud;
	dictionary<string, PointCloud>PointCloudMap;

	interface RGBDBus{
		idempotent CameraParamsMap getAllCameraParams()throws HardwareFailedException;
		idempotent 
		void  getImages(CameraList cameras, out ImageMap images)throws HardwareFailedException;
		idempotent 
		void  getPointClouds(CameraList cameras, out PointCloudMap clouds)throws HardwareFailedException;
		idempotent 
		void  getProtoClouds(CameraList cameras, out PointCloudMap protoClouds)throws HardwareFailedException;
		idempotent 
		void  getDecimatedImages(CameraList cameras, int decimation, out ImageMap images)throws HardwareFailedException;
	};
};
  
#endif
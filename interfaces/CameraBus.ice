//******************************************************************
// 
//  Generated by IDSL to IDL Translator
//  
//  File name: CameraBus.idl
//  Source: CameraBus.idsl
//  
//******************************************************************   
#ifndef ROBOCOMPCAMERABUS_ICE
#define ROBOCOMPCAMERABUS_ICE

#include <JointMotor.ice>

#include <DifferentialRobot.ice>

module RoboCompCameraBus{
	exception HardwareFailedException{string what;};
	exception MovingImageException{string what;};
	exception FormatNotAvailable{string what;};
	enum Mode{YUV422, GRAY8, RGB888Packet, RGB888Planar};
	enum captureMode{YUV411Mode, YUV422Mode, RGB8Mode, MONO16Mode, MONO8Mode, Format7Mode};
	struct Format{
		Mode modeImage;
		int width;
		int height;
		int size;
	};
	struct CameraParams{
		int focalX;
		int focalY;
		int saturation;
		int lineFreq;
		bool invertedH;
		bool invertedV;
		byte busId;
		string name;
	};
	sequence <CameraParams> CameraParamsList;
	sequence <string> DeviceList;
	struct BusParams{
		DeviceList devices;
		captureMode mode;
		int numCameras;
		int FPS;
		int width;
		int height;
		bool talkToBase;
	};
	sequence <byte> Frame;
	struct Image{
		Frame data;
		Format frmt;
		int timeStamp;
	};
	sequence <Image> ImageList;
	sequence <string> CameraList;

	interface CameraBus{
		idempotent CameraParamsList getAllCameraParams();
		idempotent BusParams getBusParams();
		idempotent 
		void  getImage(string camera, Format frmt, out Image img);
		idempotent 
		void  getImageAndStates(string camera, Format frmt, out Image img, out RoboCompJointMotor::MotorStateMap mState, out RoboCompDifferentialRobot::TBaseState bState);
		idempotent 
		void  getSyncImages(CameraList cameras, Format frmt, bool all, out ImageList imglist);
		idempotent 
		void  getSyncImagesAndStates(CameraList cameras, Format frmt, bool all, out ImageList imglist, out RoboCompJointMotor::MotorStateMap mState, out RoboCompDifferentialRobot::TBaseState bState);
	};
};
  
#endif